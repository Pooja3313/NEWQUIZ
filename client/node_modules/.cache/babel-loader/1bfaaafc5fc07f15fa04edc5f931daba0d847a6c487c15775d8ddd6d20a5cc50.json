{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\POOJA\\\\newtask\\\\client\\\\src\\\\Components\\\\Addtask\\\\Addtask.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { useAuth } from \"../Store/authh\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CreateTask = () => {\n  _s();\n  const [questionText, setQuestionText] = useState(\"\");\n  // State to hold the retrieved userID\n  const [userID, setUserID] = useState(\"\");\n  const {\n    UserIDFROMLSGet\n  } = useAuth();\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    // Fetch userID from local storage when the component mounts\n    const storedUserID = UserIDFROMLSGet();\n    setUserID(storedUserID);\n  }, [UserIDFROMLSGet]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const taskData = {\n      questionText,\n      userID\n    };\n    try {\n      const response = await fetch(\"api/authh/createtask\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(taskData)\n      });\n      const result = await response.json();\n      if (response.ok) {\n        toast.success(\"Task created successfully!\");\n        setQuestionText(\"\");\n      } else {\n        console.log(result.message);\n        toast.error(result.message || \"Failed to create task\");\n      }\n    } catch (error) {\n      console.error(\"Error creating task:\", error);\n    }\n  };\n  const fetchTasks = async () => {\n    const userID = localStorage.getItem('userID'); // Assuming userID is stored in local storage\n    try {\n      const response = await fetch(`api/authh/alltaskget/${userID}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const fetchedTasks = await response.json();\n        setTasks(fetchedTasks); // Update the tasks state with the fetched tasks\n      } else {\n        const result = await response.json();\n        console.log(result.message);\n        toast.error(result.message || 'Failed to fetch tasks');\n      }\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n      toast.error('An error occurred while fetching the tasks');\n    }\n  };\n  fetchTasks();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create a New Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Question Text:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: questionText,\n            onChange: e => setQuestionText(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Create Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Your Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: task.questionText\n        }, task._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No tasks found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(CreateTask, \"zb7Jsn+9O1kW9V9ycCSI+5nDfZ8=\", false, function () {\n  return [useAuth];\n});\n_c = CreateTask;\nexport default CreateTask;\nvar _c;\n$RefreshReg$(_c, \"CreateTask\");","map":{"version":3,"names":["React","useState","useEffect","toast","useAuth","jsxDEV","_jsxDEV","Fragment","_Fragment","CreateTask","_s","questionText","setQuestionText","userID","setUserID","UserIDFROMLSGet","tasks","setTasks","storedUserID","handleSubmit","e","preventDefault","taskData","response","fetch","method","headers","body","JSON","stringify","result","json","ok","success","console","log","message","error","fetchTasks","localStorage","getItem","fetchedTasks","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","required","type","length","map","task","_id","_c","$RefreshReg$"],"sources":["C:/Users/POOJA/newtask/client/src/Components/Addtask/Addtask.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { useAuth } from \"../Store/authh\";\r\n\r\nconst CreateTask = () => {\r\n  const [questionText, setQuestionText] = useState(\"\");\r\n   // State to hold the retrieved userID\r\n   const [userID, setUserID] = useState(\"\");\r\n\r\n   \r\n   const {UserIDFROMLSGet} = useAuth();\r\n\r\n   const [tasks, setTasks] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    // Fetch userID from local storage when the component mounts\r\n    const storedUserID = UserIDFROMLSGet();\r\n    setUserID(storedUserID);\r\n  }, [UserIDFROMLSGet]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const taskData = {\r\n      questionText,\r\n      userID,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\"api/authh/createtask\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(taskData),\r\n      });\r\n      const result = await response.json();\r\n        \r\n      if (response.ok) {\r\n        toast.success(\"Task created successfully!\");\r\n        setQuestionText(\"\");\r\n      \r\n      } else {\r\n        console.log(result.message);\r\n        toast.error(result.message || \"Failed to create task\"); \r\n      \r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error creating task:\", error);\r\n     \r\n    }\r\n  };\r\n\r\n  \r\n    const fetchTasks = async () => {\r\n      const userID = localStorage.getItem('userID'); // Assuming userID is stored in local storage\r\n      try {\r\n        const response = await fetch(`api/authh/alltaskget/${userID}`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n\r\n        if (response.ok) {\r\n          const fetchedTasks = await response.json();\r\n          setTasks(fetchedTasks); // Update the tasks state with the fetched tasks\r\n        } else {\r\n          const result = await response.json();\r\n          console.log(result.message);\r\n          toast.error(result.message || 'Failed to fetch tasks');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching tasks:', error);\r\n        toast.error('An error occurred while fetching the tasks');\r\n      }\r\n    };\r\n\r\n    fetchTasks();\r\n  \r\n\r\n\r\n  return (\r\n    <>\r\n    <div>\r\n      <h2>Create a New Task</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label>Question Text:</label>\r\n          <textarea\r\n            value={questionText}\r\n            onChange={(e) => setQuestionText(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\">Create Task</button>\r\n      </form>\r\n    </div>\r\n    \r\n    <div>\r\n    <h1>Your Tasks</h1>\r\n      {tasks.length > 0 ? (\r\n        <ul>\r\n          {tasks.map(task => (\r\n            <li key={task._id}>{task.questionText}</li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No tasks found.</p>\r\n      )}\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CreateTask;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}