{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\POOJA\\\\newtask\\\\client\\\\src\\\\Components\\\\Addtask\\\\Addtask.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateTaskForm = () => {\n  _s();\n  const [questionText, setQuestionText] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const taskData = {\n        questionText\n      }; // Wrap questionText in an object\n      const response = await fetch('/api/authh/createtask', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(taskData) // Send as JSON object\n      });\n      const data = await response.json();\n      if (response.ok) {\n        console.log(\"Task created successfully:\", data);\n        // Handle the success case, e.g., clearing the input, showing a success message\n      } else {\n        throw new Error(data.message || 'Failed to create task');\n      }\n    } catch (error) {\n      console.error('Error creating task:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter your question\",\n      value: questionText,\n      onChange: e => setQuestionText(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Create Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateTaskForm, \"knMhjdmnwCScssP/Z/qAsDgA55A=\");\n_c = CreateTaskForm;\nexport default CreateTaskForm;\nvar _c;\n$RefreshReg$(_c, \"CreateTaskForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CreateTaskForm","_s","questionText","setQuestionText","handleSubmit","e","preventDefault","taskData","response","fetch","method","headers","body","JSON","stringify","data","json","ok","console","log","Error","message","error","onSubmit","children","type","placeholder","value","onChange","target","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/POOJA/newtask/client/src/Components/Addtask/Addtask.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst CreateTaskForm = () => {\r\n  const [questionText, setQuestionText] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const taskData = { questionText }; // Wrap questionText in an object\r\n      const response = await fetch('/api/authh/createtask', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(taskData), // Send as JSON object\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        console.log(\"Task created successfully:\", data);\r\n        // Handle the success case, e.g., clearing the input, showing a success message\r\n      } else {\r\n        throw new Error(data.message || 'Failed to create task');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating task:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter your question\"\r\n        value={questionText}\r\n        onChange={(e) => setQuestionText(e.target.value)}\r\n        required\r\n      />\r\n      <button type=\"submit\">Create Task</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default CreateTaskForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMO,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMC,QAAQ,GAAG;QAAEL;MAAa,CAAC,CAAC,CAAC;MACnC,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,uBAAuB,EAAE;QACpDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAAC,CAAE;MAClC,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAIR,QAAQ,CAACS,EAAE,EAAE;QACfC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEJ,IAAI,CAAC;QAC/C;MACF,CAAC,MAAM;QACL,MAAM,IAAIK,KAAK,CAACL,IAAI,CAACM,OAAO,IAAI,uBAAuB,CAAC;MAC1D;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,oBACEvB,OAAA;IAAMwB,QAAQ,EAAEnB,YAAa;IAAAoB,QAAA,gBAC3BzB,OAAA;MACE0B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,qBAAqB;MACjCC,KAAK,EAAEzB,YAAa;MACpB0B,QAAQ,EAAGvB,CAAC,IAAKF,eAAe,CAACE,CAAC,CAACwB,MAAM,CAACF,KAAK,CAAE;MACjDG,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eACFnC,OAAA;MAAQ0B,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAC;IAAW;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEX,CAAC;AAACjC,EAAA,CAxCID,cAAc;AAAAmC,EAAA,GAAdnC,cAAc;AA0CpB,eAAeA,cAAc;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}